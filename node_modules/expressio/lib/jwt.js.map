{"version":3,"sources":["../src/jwt.js"],"names":["schema","Joi","object","enabled","boolean","required","secret","string","expiresIn","algorithm","server","config","utils","sanitize","setup","unless","fn","use","sign","data","opts","jwt","errorHandler","err","req","res","next","name","messages","authError","ndtk","httpError","message","events","on","srv"],"mappings":";;;;;;kQAAA;;;;;;;;;;;AAWA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA;;;;AAIA,MAAMA,SAASC,cAAIC,MAAJ,CAAW;AACxBC,WAASF,cAAIG,OAAJ,GAAcC,QAAd,EADe;AAExBC,UAAQL,cAAIM,MAAJ,GAAaF,QAAb,EAFgB;AAGxBG,aAAWP,cAAIM,MAAJ,GAAaF,QAAb,EAHa;AAIxBI,aAAWR,cAAIM,MAAJ,GAAaF,QAAb;AAJa,CAAX,CAAf;;kBAOe,CAACK,MAAD,EAASC,MAAT,KAAoB;AACjC,QAAM;AACJ;AACAL,UAFI;AAGJE,aAHI;AAIJC,aAJI;AAKJN;AALI,MAMFS,gBAAMC,QAAN,CAAeF,MAAf,EAAuBX,MAAvB,EAA+B,oBAA/B,CANJ;;AAQA,MAAI,CAACG,OAAL,EAAc;;AAEd;;;AAGA,QAAMW,QAAQ,CAACC,SAAS,EAAV,KAAiB;AAC7B,UAAMC,KAAK,0BAAK,EAAEV,MAAF,EAAL,EAAiBS,MAAjB,CAAwBA,MAAxB,CAAX;AACAL,WAAOO,GAAP,CAAWD,EAAX;AACD,GAHD;;AAKA;;;;AAIA,QAAME,OAAO,CAACC,IAAD,EAAOC,IAAP,KAAgBC,uBAAIH,IAAJ,CAAS,EAAEC,IAAF,EAAT,EAAmBb,MAAnB,aAA6BE,SAA7B,IAA2CY,IAA3C,IAAiDX,SAAjD,IAA7B;;AAEA;;;AAGA,QAAMa,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,KAAyB;AAC5C,QAAIH,IAAII,IAAJ,KAAa,mBAAjB,EAAsC;AACpC,YAAMC,WAAW;AACf,uBAAe,gCADA;AAEf,6BAAqB,+BAFN;AAGf,yBAAiB,+BAHF;AAIf,4CAAoC;AAJrB,OAAjB;;AAOA,YAAMC,YAAYC,eAAKC,SAAL,CAAe,GAAf,EAAoB,EAAEC,SAASJ,SAASL,IAAIS,OAAb,KAAyBT,IAAIS,OAAxC,EAApB,CAAlB;AACA,aAAON,KAAKG,SAAL,CAAP;AACD;;AAED,WAAOH,KAAKH,GAAL,CAAP;AACD,GAdD;;AAgBA;AACAb,SAAOW,GAAP,GAAa,EAAEH,IAAF,EAAQJ;;AAErB;AAFa,GAAb,CAGAJ,OAAOO,GAAP,CAAW,CAACO,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC7BF,QAAIH,GAAJ,GAAU,EAAEH,IAAF,EAAV;AACAQ;AACD,GAHD;;AAKA;AACAhB,SAAOuB,MAAP,CAAcC,EAAd,CAAiB,UAAjB,EAA6BC,OAAOA,IAAIlB,GAAJ,CAAQK,YAAR,CAApC;AACD,C","file":"jwt.js","sourcesContent":["/**\n * JWT\n *\n * Authorize requests based\n * on JWT Tokens\n *\n * @copyright Copyright (c) 2018, hugw.io\n * @author Hugo W - contact@hugw.io\n * @license MIT\n */\n\nimport ejwt from 'express-jwt'\nimport Joi from 'joi'\nimport jwt from 'jsonwebtoken'\nimport ndtk from 'ndtk'\n\nimport utils from '@/utils'\n\n/**\n * Object schemas\n * to validate configuration\n */\nconst schema = Joi.object({\n  enabled: Joi.boolean().required(),\n  secret: Joi.string().required(),\n  expiresIn: Joi.string().required(),\n  algorithm: Joi.string().required(),\n})\n\nexport default (server, config) => {\n  const {\n    // @TODO Move secret outside of jwt config object\n    secret,\n    expiresIn,\n    algorithm,\n    enabled,\n  } = utils.sanitize(config, schema, 'Invalid JWT config')\n\n  if (!enabled) return\n\n  /**\n   * Setup JWT authorization\n   */\n  const setup = (unless = {}) => {\n    const fn = ejwt({ secret }).unless(unless)\n    server.use(fn)\n  }\n\n  /**\n   * Create JWT tokens\n   * with a given signature\n   */\n  const sign = (data, opts) => jwt.sign({ data }, secret, { expiresIn, ...opts, algorithm })\n\n  /**\n   * Format JWT authorization errors\n   */\n  const errorHandler = (err, req, res, next) => {\n    if (err.name === 'UnauthorizedError') {\n      const messages = {\n        'jwt expired': 'The token provided has expired',\n        'invalid signature': 'The token provided is invalid',\n        'jwt malformed': 'The token provided is invalid',\n        'No authorization token was found': 'Authorization token is missing',\n      }\n\n      const authError = ndtk.httpError(401, { message: messages[err.message] || err.message })\n      return next(authError)\n    }\n\n    return next(err)\n  }\n\n  // Expose JWT Api to the server object\n  server.jwt = { sign, setup }\n\n  // Expose JWT Api to the request object\n  server.use((req, res, next) => {\n    req.jwt = { sign }\n    next()\n  })\n\n  // Register error handler\n  server.events.on('preStart', srv => srv.use(errorHandler))\n}\n"]}