'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Core
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * @copyright Copyright (c) 2018, hugw.io
                                                                                                                                                                                                                                                                   * @author Hugo W - contact@hugw.io
                                                                                                                                                                                                                                                                   * @license MIT
                                                                                                                                                                                                                                                                   */

var _ndtk = require('ndtk');

var _ndtk2 = _interopRequireDefault(_ndtk);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _isString = require('lodash/isString');

var _isString2 = _interopRequireDefault(_isString);

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _layer = require('express/lib/router/layer');

var _layer2 = _interopRequireDefault(_layer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Load initializers
 */
function initialize(name, fn) {
  const server = this;

  _ndtk2.default.assert((0, _isString2.default)(name) && name.length !== 0, 'Initialize error: name is not a string');
  _ndtk2.default.assert((0, _isFunction2.default)(fn), `Initialize error: "${name}" has not a valid function`);

  // If no valid config is found, then return
  // an empty object as the second arg
  fn(server, server.config[name] || {});
}

/**
 * Execute body/params/query validations
 * and throw formatted error objects for possible errors
 * or append sanitized data to the request object
 */
const validate = (source, schema) => {
  _ndtk2.default.assert((0, _isString2.default)(source), 'Validate error: source is not a string');

  // Ensure schema is a valid Joi object
  _ndtk2.default.assert(schema && schema.isJoi, 'Validate error: schema provided is not a valid Joi schema');

  const validSource = ['body', 'params', 'query'].includes(source);
  _ndtk2.default.assert(validSource, 'Validate error: bad validation source, possible options are "body", "params", "query"');

  return (req, res, next) => {
    // First check for empty payloads
    if (!req[source]) throw _ndtk2.default.httpError(422, { message: `Request ${source} data is missing`, type: 'VALIDATION' });

    const result = _joi2.default.validate(req[source], schema, { stripUnknown: true, abortEarly: false });

    if (result.error) {
      const { details } = result.error;

      const attributes = details.reduce((obj, validation) => {
        const { context: { key }, message, type } = validation;
        return Object.assign({}, obj, { [key]: { message: message.replace(/"/g, ''), type } });
      }, {});

      throw _ndtk2.default.httpError(422, { message: `Invalid request ${source} data`, type: 'VALIDATION', attributes });
    }

    // Reassign sanitized data back
    // to the request object ( with unknown keys removed )
    req[source] = result.value;
    next();
  };
};

/**
 * Controller middleware
 * to handle async errors
 */
const controller = resource => {
  _ndtk2.default.assert((0, _isFunction2.default)(resource), 'Controller error: resource is not a function');

  return async (req, res, next) => {
    try {
      await resource(req, res, next);
    } catch (e) {
      next(e);
    }
  };
};

/**
 * Format all caught errors
 * and return an http error object
 */
const generalErrorHandler = (err, req, res, next) => {
  // eslint-disable-line
  // For the purpose of logging at least a message
  err.message = err.message || 'Something bad happened';

  const { output } = err.isHttp ? err : _ndtk2.default.httpError();
  if (output.status >= 500) req.logger.error(err);

  res.status(output.status);
  res.json(_extends({}, output));
};

/**
 * Format not found routes
 * to return a 404 response
 */
const notFoundHandler = (req, res, next) => next(_ndtk2.default.httpError(404));

/**
 * Auto asyncfy all routes
 * instead of having to rely on
 * using "controller" manually
 *
 * @link https://github.com/davidbanham/express-async-errors
 */
Object.defineProperty(_layer2.default.prototype, 'handle', {
  get() {
    return this.fn;
  },
  set(fn) {
    // Ignore error handlers and non async functions
    this.fn = fn.length !== 4 && fn.constructor.name === 'AsyncFunction' ? controller(fn) : fn;
  }
});

exports.default = {
  initialize,
  controller,
  generalErrorHandler,
  notFoundHandler,
  validate
};
//# sourceMappingURL=core.js.map