'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validate = exports.httpError = exports.router = undefined;
exports.default = expressio;

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _helmet = require('helmet');

var _helmet2 = _interopRequireDefault(_helmet);

var _cors = require('cors');

var _cors2 = _interopRequireDefault(_cors);

var _compression = require('compression');

var _compression2 = _interopRequireDefault(_compression);

var _ndtk = require('ndtk');

var _ndtk2 = _interopRequireDefault(_ndtk);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _dotenv = require('dotenv');

var _dotenv2 = _interopRequireDefault(_dotenv);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _mailer = require('./mailer');

var _mailer2 = _interopRequireDefault(_mailer);

var _core = require('./core');

var _core2 = _interopRequireDefault(_core);

var _jwt = require('./jwt');

var _jwt2 = _interopRequireDefault(_jwt);

var _events = require('./events');

var _events2 = _interopRequireDefault(_events);

var _database = require('./database');

var _database2 = _interopRequireDefault(_database);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Expressio
 */
function expressio(opts) {
  // Load default options if provided
  const defaults = _ndtk2.default.merge({ root: null }, opts);

  // Attempt to get the current caller
  // directly if none is provided and use that as the root
  // of the application to force an opinated folder structure
  const root = defaults.root || _ndtk2.default.ccd();
  _ndtk2.default.assert(root && _ndtk2.default.isDir(root), 'Application root path is invalid.');

  // Load environment variables
  _dotenv2.default.config({ path: _path2.default.join(root, '.env') });

  // Load config variables
  const config = _utils2.default.config(`${root}/config`, './config');

  // Ensure the current Node version installed is supported
  _ndtk2.default.assert(_ndtk2.default.supported(config.engine), 'Current Node version is not supported.');

  // Create a new Express server instance
  const server = (0, _express2.default)();

  // Extend initialize function
  server.initialize = _core2.default.initialize;

  // Expose config object
  server.config = config;

  // Expose root path
  server.root = root;

  // Define the server environment
  server.set('env', config.env);
  server.env = config.env;

  // Parse incoming requests
  // to JSON format
  server.use(_bodyParser2.default.json());
  server.use(_bodyParser2.default.urlencoded({ extended: true }));

  // Add GZIP compression support
  // for HTTP responses
  server.use((0, _compression2.default)());

  // Security
  // (CORS & HTTP Headers)
  server.use((0, _helmet2.default)());
  server.use((0, _cors2.default)(config.cors));

  // Add core initializers
  server.initialize('logger', _logger2.default);
  server.initialize('events', _events2.default);
  server.initialize('mailer', _mailer2.default);
  server.initialize('jwt', _jwt2.default);
  server.initialize('database', _database2.default);

  // Set server instance
  // initial value
  server.instance = null;

  /**
   * Start server
   */
  server.start = async () => {
    if (server.instance) return;

    try {
      // Ensure not found routes
      // are handled properly
      server.use(_core2.default.notFoundHandler);

      // Emit "preStart" events
      // to possibly register custom
      // error handlers
      await server.events.emit('preStart');

      server.use(_core2.default.generalErrorHandler);

      await new Promise(res => {
        // Start a new server instance
        server.instance = server.listen(config.port, config.address, async () => {
          const { address, port } = server.instance.address();
          server.logger.info(`Server running â†’ ${address}:${port} @ ${config.env}`);

          // Emit "postStart" events
          await server.events.emit('postStart');

          res();
        });
      });
    } catch (err) {
      server.logger.error(err);
    }
  };

  /**
   * Stop server
   */
  server.stop = async () => {
    try {
      if (!server.instance) return;
      // Emit "preStop" events
      await server.events.emit('preStop');
      // Close server instance
      server.instance.close();
      // Emit "postStop" events
      await server.events.emit('postStop');
      // Reset server instance
      server.instance = null;
    } catch (err) {
      _ndtk2.default.assert(false, err);
    }
  };

  return server;
}

/**
 * Expose external
 * dependencies and utility
 * functions
 */
/**
 * Expressio
 *
 * @copyright Copyright (c) 2017, hugw.io
 * @author Hugo W - contact@hugw.io
 * @license MIT
 */

const router = _express2.default.Router;
const { httpError } = _ndtk2.default;
const { validate } = _core2.default;

exports.router = router;
exports.httpError = httpError;
exports.validate = validate;
//# sourceMappingURL=index.js.map