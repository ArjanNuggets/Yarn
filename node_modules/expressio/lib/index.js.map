{"version":3,"sources":["../src/index.js"],"names":["expressio","opts","defaults","ndtk","merge","root","ccd","assert","isDir","dotenv","config","path","join","utils","supported","engine","server","initialize","core","set","env","use","bodyParser","json","urlencoded","extended","cors","logger","events","mailer","jwt","database","instance","start","notFoundHandler","emit","generalErrorHandler","Promise","res","listen","port","address","info","err","error","stop","close","router","express","Router","httpError","validate"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Expressio\n *\n * @copyright Copyright (c) 2017, hugw.io\n * @author Hugo W - contact@hugw.io\n * @license MIT\n */\n\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport helmet from 'helmet'\nimport cors from 'cors'\nimport compress from 'compression'\nimport ndtk from 'ndtk'\nimport path from 'path'\nimport dotenv from 'dotenv'\n\nimport utils from '@/utils'\nimport logger from '@/logger'\nimport mailer from '@/mailer'\nimport core from '@/core'\nimport jwt from '@/jwt'\nimport events from '@/events'\nimport database from '@/database'\n\n/**\n * Expressio\n */\nexport default function expressio(opts) {\n  // Load default options if provided\n  const defaults = ndtk.merge({ root: null }, opts)\n\n  // Attempt to get the current caller\n  // directly if none is provided and use that as the root\n  // of the application to force an opinated folder structure\n  const root = defaults.root || ndtk.ccd()\n  ndtk.assert(root && ndtk.isDir(root), 'Application root path is invalid.')\n\n  // Load environment variables\n  dotenv.config({ path: path.join(root, '.env') })\n\n  // Load config variables\n  const config = utils.config(`${root}/config`, './config')\n\n  // Ensure the current Node version installed is supported\n  ndtk.assert(ndtk.supported(config.engine), 'Current Node version is not supported.')\n\n  // Create a new Express server instance\n  const server = express()\n\n  // Extend initialize function\n  server.initialize = core.initialize\n\n  // Expose config object\n  server.config = config\n\n  // Expose root path\n  server.root = root\n\n  // Define the server environment\n  server.set('env', config.env)\n  server.env = config.env\n\n  // Parse incoming requests\n  // to JSON format\n  server.use(bodyParser.json())\n  server.use(bodyParser.urlencoded({ extended: true }))\n\n  // Add GZIP compression support\n  // for HTTP responses\n  server.use(compress())\n\n  // Security\n  // (CORS & HTTP Headers)\n  server.use(helmet())\n  server.use(cors(config.cors))\n\n  // Add core initializers\n  server.initialize('logger', logger)\n  server.initialize('events', events)\n  server.initialize('mailer', mailer)\n  server.initialize('jwt', jwt)\n  server.initialize('database', database)\n\n  // Set server instance\n  // initial value\n  server.instance = null\n\n  /**\n   * Start server\n   */\n  server.start = async () => {\n    if (server.instance) return\n\n    try {\n      // Ensure not found routes\n      // are handled properly\n      server.use(core.notFoundHandler)\n\n      // Emit \"preStart\" events\n      // to possibly register custom\n      // error handlers\n      await server.events.emit('preStart')\n\n      server.use(core.generalErrorHandler)\n\n      await new Promise((res) => {\n        // Start a new server instance\n        server.instance = server.listen(config.port, config.address, async () => {\n          const { address, port } = server.instance.address()\n          server.logger.info(`Server running â†’ ${address}:${port} @ ${config.env}`)\n\n          // Emit \"postStart\" events\n          await server.events.emit('postStart')\n\n          res()\n        })\n      })\n    } catch (err) {\n      server.logger.error(err)\n    }\n  }\n\n  /**\n   * Stop server\n   */\n  server.stop = async () => {\n    try {\n      if (!server.instance) return\n      // Emit \"preStop\" events\n      await server.events.emit('preStop')\n      // Close server instance\n      server.instance.close()\n      // Emit \"postStop\" events\n      await server.events.emit('postStop')\n      // Reset server instance\n      server.instance = null\n    } catch (err) {\n      ndtk.assert(false, err)\n    }\n  }\n\n  return server\n}\n\n/**\n * Expose external\n * dependencies and utility\n * functions\n */\nconst router = express.Router\nconst { httpError } = ndtk\nconst { validate } = core\n\nexport {\n  router,\n  httpError,\n  validate,\n}\n"]}