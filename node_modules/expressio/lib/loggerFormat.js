'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Logger formatters
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * @copyright Copyright (c) 2018, hugw.io
                                                                                                                                                                                                                                                                   * @author Hugo W - contact@hugw.io
                                                                                                                                                                                                                                                                   * @license MIT
                                                                                                                                                                                                                                                                   */

var _winston = require('winston');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parseJSON(string) {
  try {
    const content = JSON.parse(string);
    if (content && typeof content === 'object') return content;
  } catch (e) {} // eslint-disable-line

  return string;
}

const formatters = {
  // Timestamps
  timestamp: (0, _winston.format)(info => {
    const date = new Date().toISOString();
    return _extends({}, info, { timestamp: _chalk2.default.grey(date) });
  }),

  // Levels
  level: (0, _winston.format)(info => {
    const { level } = info;

    const color = {
      error: _chalk2.default.red,
      warn: _chalk2.default.yellow,
      info: _chalk2.default.green,
      verbose: _chalk2.default.blue,
      debug: _chalk2.default.cyan,
      silly: _chalk2.default.magenta
    };

    return _extends({}, info, { level: color[level](`[${level}]`) });
  }),

  // Errors
  error: (0, _winston.format)(info => {
    if (info instanceof Error) {
      const message = _chalk2.default.red(info.message);

      // Remove first line (duplicate of message)
      const lines = info.stack.substring(info.stack.indexOf('\n') + 1);
      const stack = _chalk2.default.red(lines);

      return _extends({}, info, {
        message: `${message} \n${stack}`
      });
    }

    return info;
  }),

  // Request status code
  reqStatus: (0, _winston.format)(info => {
    if (!info.req) return info;

    const { status } = info.req;
    let color = _chalk2.default.red;

    if (status < 400) color = _chalk2.default.green;
    if (status >= 400 && status < 500) color = _chalk2.default.yellow;

    return _extends({}, info, { req: _extends({}, info.req, { status: color(status) }) });
  }),

  // Request extras (size / type / time)
  reqExtras: (0, _winston.format)(info => {
    if (!info.req) return info;

    const { time, size, type } = info.req;

    const sizeLabel = size ? `/ ${size}b` : '';
    const typeLabel = type ? `/ ${type}` : '';
    const extras = _chalk2.default.gray(`${time}ms ${sizeLabel} ${typeLabel}`);
    return _extends({}, info, { req: _extends({}, info.req, { extras }) });
  }),

  // Request payload & responses
  reqBody: (0, _winston.format)(info => {
    if (!info.req) return info;

    const { payload } = info.req;

    // Parse response if JSON
    const response = parseJSON(info.req.response);

    const { prettify } = info.options;
    const opts = _extends({ colors: true, compact: false }, !prettify ? { breakLength: Infinity } : {});

    // Update inspect colors
    _util2.default.inspect.styles.string = 'white';

    return _extends({}, info, {
      req: _extends({}, info.req, {
        payload: _chalk2.default.gray(`\n Payload → ${_util2.default.inspect(payload, opts)}`),
        response: _chalk2.default.gray(`\n Response → ${_util2.default.inspect(response, opts)}`)
      })
    });
  }),

  // Request
  req: (0, _winston.format)(info => {
    if (!info.req) return info;

    const {
      method,
      path,
      status,
      extras,
      payload,
      response
    } = info.req;

    const { env } = info.options;

    const message = env !== 'production' ? `${method} ${path}  ${status}  ${extras} ${payload} ${response}` : `${method} ${path}  ${status}  ${extras}`;

    return _extends({}, info, { message });
  }),

  // Mailer
  mailer: (0, _winston.format)(info => {
    if (!info.mailer) return info;

    const { prettify } = info.options;
    const opts = _extends({ colors: true, compact: false }, !prettify ? { breakLength: Infinity } : {});

    // Update inspect colors
    _util2.default.inspect.styles.string = 'white';

    const header = 'Email sent';
    const response = _chalk2.default.gray(`Response → ${_util2.default.inspect(info.mailer.response, opts)}`);
    const debug = _chalk2.default.gray(`Debug URL → ${_util2.default.inspect(info.mailer.debug, opts)}`);
    return _extends({}, info, {
      message: `${header} \n ${response} \n ${debug}`
    });
  })
};

exports.default = _winston.format.combine(formatters.error(), formatters.timestamp(), formatters.level(),

// Request / Response
formatters.reqStatus(), formatters.reqExtras(), formatters.reqBody(), formatters.req(),

// Mailer
formatters.mailer(),

// Print message
_winston.format.printf(info => `${info.timestamp} ${info.level} ${info.message}`));
//# sourceMappingURL=loggerFormat.js.map