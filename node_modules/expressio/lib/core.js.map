{"version":3,"sources":["../src/core.js"],"names":["initialize","name","fn","server","ndtk","assert","length","config","validate","source","schema","isJoi","validSource","includes","req","res","next","httpError","message","type","result","Joi","stripUnknown","abortEarly","error","details","attributes","reduce","obj","validation","context","key","Object","assign","replace","value","controller","resource","e","generalErrorHandler","err","output","isHttp","status","logger","json","notFoundHandler","defineProperty","Layer","prototype","get","set","constructor"],"mappings":"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","file":"core.js","sourcesContent":["/**\n * Core\n *\n * @copyright Copyright (c) 2018, hugw.io\n * @author Hugo W - contact@hugw.io\n * @license MIT\n */\n\nimport ndtk from 'ndtk'\nimport isFunction from 'lodash/isFunction'\nimport isString from 'lodash/isString'\nimport Joi from 'joi'\nimport Layer from 'express/lib/router/layer'\n\n/**\n * Load initializers\n */\nfunction initialize(name, fn) {\n  const server = this\n\n  ndtk.assert(isString(name) && name.length !== 0, 'Initialize error: name is not a string')\n  ndtk.assert(isFunction(fn), `Initialize error: \"${name}\" has not a valid function`)\n\n  // If no valid config is found, then return\n  // an empty object as the second arg\n  fn(server, server.config[name] || {})\n}\n\n/**\n * Execute body/params/query validations\n * and throw formatted error objects for possible errors\n * or append sanitized data to the request object\n */\nconst validate = (source, schema) => {\n  ndtk.assert(isString(source), 'Validate error: source is not a string')\n\n  // Ensure schema is a valid Joi object\n  ndtk.assert(schema && schema.isJoi, 'Validate error: schema provided is not a valid Joi schema')\n\n  const validSource = ['body', 'params', 'query'].includes(source)\n  ndtk.assert(validSource, 'Validate error: bad validation source, possible options are \"body\", \"params\", \"query\"')\n\n  return (req, res, next) => {\n    // First check for empty payloads\n    if (!req[source]) throw ndtk.httpError(422, { message: `Request ${source} data is missing`, type: 'VALIDATION' })\n\n    const result = Joi.validate(req[source], schema, { stripUnknown: true, abortEarly: false })\n\n    if (result.error) {\n      const { details } = result.error\n\n      const attributes = details.reduce((obj, validation) => {\n        const { context: { key }, message, type } = validation\n        return Object.assign({}, obj, { [key]: { message: message.replace(/\"/g, ''), type } })\n      }, {})\n\n      throw ndtk.httpError(422, { message: `Invalid request ${source} data`, type: 'VALIDATION', attributes })\n    }\n\n    // Reassign sanitized data back\n    // to the request object ( with unknown keys removed )\n    req[source] = result.value\n    next()\n  }\n}\n\n/**\n * Controller middleware\n * to handle async errors\n */\nconst controller = (resource) => {\n  ndtk.assert(isFunction(resource), 'Controller error: resource is not a function')\n\n  return async (req, res, next) => {\n    try {\n      await resource(req, res, next)\n    } catch (e) { next(e) }\n  }\n}\n\n/**\n * Format all caught errors\n * and return an http error object\n */\nconst generalErrorHandler = (err, req, res, next) => { // eslint-disable-line\n  // For the purpose of logging at least a message\n  err.message = err.message || 'Something bad happened'\n\n  const { output } = err.isHttp ? err : ndtk.httpError()\n  if (output.status >= 500) req.logger.error(err)\n\n  res.status(output.status)\n  res.json({ ...output })\n}\n\n/**\n * Format not found routes\n * to return a 404 response\n */\nconst notFoundHandler = (req, res, next) => next(ndtk.httpError(404))\n\n/**\n * Auto asyncfy all routes\n * instead of having to rely on\n * using \"controller\" manually\n *\n * @link https://github.com/davidbanham/express-async-errors\n */\nObject.defineProperty(Layer.prototype, 'handle', {\n  get() { return this.fn },\n  set(fn) {\n    // Ignore error handlers and non async functions\n    this.fn = (fn.length !== 4 && fn.constructor.name === 'AsyncFunction') ? controller(fn) : fn\n  },\n})\n\nexport default {\n  initialize,\n  controller,\n  generalErrorHandler,\n  notFoundHandler,\n  validate,\n}\n"]}