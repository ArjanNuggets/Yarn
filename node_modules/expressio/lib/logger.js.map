{"version":3,"sources":["../src/logger.js"],"names":["logger","level","format","transports","Console","schema","Joi","object","string","required","silent","boolean","prettify","server","config","utils","sanitize","options","env","use","req","res","next","startTime","Date","end","chunk","encoding","method","payload","body","path","originalUrl","url","time","status","statusCode","size","_headers","type","logLevel","info","warn","error","response"],"mappings":";;;;;;AAQA;;AACA;;;;AAEA;;;;AACA;;;;;;AAEA;AAdA;;;;;;;;AAeA,MAAMA,SAAS,2BAAa,EAAEC,OAAO,MAAT,EAAiBC,8BAAjB,EAAyBC,YAAY,CAAC,IAAIA,oBAAWC,OAAf,EAAD,CAArC,EAAb,CAAf;;AAEA;;;;AAIA,MAAMC,SAASC,cAAIC,MAAJ,CAAW;AACxBN,SAAOK,cAAIE,MAAJ,GAAaC,QAAb,EADiB;AAExBC,UAAQJ,cAAIK,OAAJ,GAAcF,QAAd,EAFgB;AAGxBG,YAAUN,cAAIK,OAAJ,GAAcF,QAAd;AAHc,CAAX,CAAf;;kBAMe,CAACI,MAAD,EAASC,MAAT,KAAoB;AACjC,QAAM;AACJb,SADI;AAEJS,UAFI;AAGJE;AAHI,MAIFG,gBAAMC,QAAN,CAAeF,MAAf,EAAuBT,MAAvB,EAA+B,uBAA/B,CAJJ;;AAMAL,SAAOC,KAAP,GAAeA,KAAf;AACAD,SAAOU,MAAP,GAAgBA,MAAhB;AACAV,SAAOiB,OAAP,GAAiB,EAAEL,QAAF,EAAYM,KAAKL,OAAOK;;AAEzC;AAFiB,GAAjB,CAGAL,OAAOb,MAAP,GAAgBA,MAAhB;;AAEA;AACAa,SAAOM,GAAP,CAAW,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC7BF,QAAIpB,MAAJ,GAAaA,MAAb;AACAsB;AACD,GAHD;;AAKA;AACAT,SAAOM,GAAP,CAAW,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC7B,UAAMC,YAAY,IAAIC,IAAJ,EAAlB;;AAEA,UAAM,EAAEC,GAAF,KAAUJ,GAAhB;AACAA,QAAII,GAAJ,GAAU,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC7BN,UAAII,GAAJ,GAAUA,GAAV;AACAJ,UAAII,GAAJ,CAAQC,KAAR,EAAeC,QAAf;;AAEA,YAAM,EAAEC,MAAF,KAAaR,GAAnB;AACA,YAAMS,UAAUT,IAAIU,IAApB;AACA,YAAMC,OAAOX,IAAIY,WAAJ,IAAmBZ,IAAIa,GAApC;AACA,YAAMC,OAAO,IAAIV,IAAJ,KAAaD,SAA1B;AACA,YAAMY,SAASd,IAAIe,UAAnB;AACA,YAAMC,OAAOhB,IAAIiB,QAAJ,CAAa,gBAAb,CAAb,CAT6B,CASe;AAC5C,YAAMC,OAAOlB,IAAIiB,QAAJ,CAAa,cAAb,CAAb,CAV6B,CAUa;AAC1C,YAAMR,OAAOJ,KAAb;;AAEA,UAAIc,WAAWxC,OAAOyC,IAAtB;AACA,UAAIN,UAAU,GAAd,EAAmBK,WAAWxC,OAAO0C,IAAlB;AACnB,UAAIP,UAAU,GAAd,EAAmBK,WAAWxC,OAAO2C,KAAlB;;AAEnBH,eAAS,IAAT,EAAe;AACbpB,aAAK;AACHQ,gBADG;AAEHG,cAFG;AAGHI,gBAHG;AAIHD,cAJG;AAKHG,cALG;AAMHE,cANG;AAOHV,iBAPG;AAQHe,oBAAUd;AARP,SADQ;AAWbb,iBAASG,IAAIpB,MAAJ,CAAWiB;AAXP,OAAf;AAaD,KA9BD;;AAgCAK;AACD,GArCD;AAsCD,C","file":"logger.js","sourcesContent":["/**\n * Logger\n *\n * @copyright Copyright (c) 2017, hugw.io\n * @author Hugo W - contact@hugw.io\n * @license MIT\n */\n\nimport { createLogger, transports } from 'winston'\nimport Joi from 'joi'\n\nimport format from '@/loggerFormat'\nimport utils from '@/utils'\n\n// Setup Winston logger instance\nconst logger = createLogger({ level: 'info', format, transports: [new transports.Console()] })\n\n/**\n * Object schemas\n * to validate configuration\n */\nconst schema = Joi.object({\n  level: Joi.string().required(),\n  silent: Joi.boolean().required(),\n  prettify: Joi.boolean().required(),\n})\n\nexport default (server, config) => {\n  const {\n    level,\n    silent,\n    prettify,\n  } = utils.sanitize(config, schema, 'Invalid Logger config')\n\n  logger.level = level\n  logger.silent = silent\n  logger.options = { prettify, env: server.env }\n\n  // Expose Logger API to the server object\n  server.logger = logger\n\n  // Expose Logger API to the request object\n  server.use((req, res, next) => {\n    req.logger = logger\n    next()\n  })\n\n  // Log request/response info\n  server.use((req, res, next) => {\n    const startTime = new Date()\n\n    const { end } = res\n    res.end = (chunk, encoding) => {\n      res.end = end\n      res.end(chunk, encoding)\n\n      const { method } = req\n      const payload = req.body\n      const path = req.originalUrl || req.url\n      const time = new Date() - startTime\n      const status = res.statusCode\n      const size = res._headers['content-length'] // eslint-disable-line\n      const type = res._headers['content-type'] // eslint-disable-line\n      const body = chunk\n\n      let logLevel = logger.info\n      if (status >= 400) logLevel = logger.warn\n      if (status >= 500) logLevel = logger.error\n\n      logLevel(null, {\n        req: {\n          method,\n          path,\n          status,\n          time,\n          size,\n          type,\n          payload,\n          response: body,\n        },\n        options: req.logger.options,\n      })\n    }\n\n    next()\n  })\n}\n"]}