'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _winston = require('winston');

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _loggerFormat = require('./loggerFormat');

var _loggerFormat2 = _interopRequireDefault(_loggerFormat);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Setup Winston logger instance
/**
 * Logger
 *
 * @copyright Copyright (c) 2017, hugw.io
 * @author Hugo W - contact@hugw.io
 * @license MIT
 */

const logger = (0, _winston.createLogger)({ level: 'info', format: _loggerFormat2.default, transports: [new _winston.transports.Console()] });

/**
 * Object schemas
 * to validate configuration
 */
const schema = _joi2.default.object({
  level: _joi2.default.string().required(),
  silent: _joi2.default.boolean().required(),
  prettify: _joi2.default.boolean().required()
});

exports.default = (server, config) => {
  const {
    level,
    silent,
    prettify
  } = _utils2.default.sanitize(config, schema, 'Invalid Logger config');

  logger.level = level;
  logger.silent = silent;
  logger.options = { prettify, env: server.env

    // Expose Logger API to the server object
  };server.logger = logger;

  // Expose Logger API to the request object
  server.use((req, res, next) => {
    req.logger = logger;
    next();
  });

  // Log request/response info
  server.use((req, res, next) => {
    const startTime = new Date();

    const { end } = res;
    res.end = (chunk, encoding) => {
      res.end = end;
      res.end(chunk, encoding);

      const { method } = req;
      const payload = req.body;
      const path = req.originalUrl || req.url;
      const time = new Date() - startTime;
      const status = res.statusCode;
      const size = res._headers['content-length']; // eslint-disable-line
      const type = res._headers['content-type']; // eslint-disable-line
      const body = chunk;

      let logLevel = logger.info;
      if (status >= 400) logLevel = logger.warn;
      if (status >= 500) logLevel = logger.error;

      logLevel(null, {
        req: {
          method,
          path,
          status,
          time,
          size,
          type,
          payload,
          response: body
        },
        options: req.logger.options
      });
    };

    next();
  });
};
//# sourceMappingURL=logger.js.map