{"version":3,"sources":["../src/loggerFormat.js"],"names":["parseJSON","string","content","JSON","parse","e","formatters","timestamp","info","date","Date","toISOString","chalk","grey","level","color","error","red","warn","yellow","green","verbose","blue","debug","cyan","silly","magenta","Error","message","lines","stack","substring","indexOf","reqStatus","req","status","reqExtras","time","size","type","sizeLabel","typeLabel","extras","gray","reqBody","payload","response","prettify","options","opts","colors","compact","breakLength","Infinity","util","inspect","styles","method","path","env","mailer","header","format","combine","printf"],"mappings":"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","file":"loggerFormat.js","sourcesContent":["/**\n * Logger formatters\n *\n * @copyright Copyright (c) 2018, hugw.io\n * @author Hugo W - contact@hugw.io\n * @license MIT\n */\n\nimport { format } from 'winston'\nimport chalk from 'chalk'\nimport util from 'util'\n\nfunction parseJSON(string) {\n  try {\n    const content = JSON.parse(string)\n    if (content && typeof content === 'object') return content\n  } catch (e) {} // eslint-disable-line\n\n  return string\n}\n\nconst formatters = {\n  // Timestamps\n  timestamp: format((info) => {\n    const date = new Date().toISOString()\n    return { ...info, timestamp: chalk.grey(date) }\n  }),\n\n  // Levels\n  level: format((info) => {\n    const { level } = info\n\n    const color = {\n      error: chalk.red,\n      warn: chalk.yellow,\n      info: chalk.green,\n      verbose: chalk.blue,\n      debug: chalk.cyan,\n      silly: chalk.magenta,\n    }\n\n    return { ...info, level: color[level](`[${level}]`) }\n  }),\n\n  // Errors\n  error: format((info) => {\n    if (info instanceof Error) {\n      const message = chalk.red(info.message)\n\n      // Remove first line (duplicate of message)\n      const lines = info.stack.substring(info.stack.indexOf('\\n') + 1)\n      const stack = chalk.red(lines)\n\n      return {\n        ...info,\n        message: `${message} \\n${stack}`,\n      }\n    }\n\n    return info\n  }),\n\n  // Request status code\n  reqStatus: format((info) => {\n    if (!info.req) return info\n\n    const { status } = info.req\n    let color = chalk.red\n\n    if (status < 400) color = chalk.green\n    if (status >= 400 && status < 500) color = chalk.yellow\n\n    return { ...info, req: { ...info.req, status: color(status) } }\n  }),\n\n  // Request extras (size / type / time)\n  reqExtras: format((info) => {\n    if (!info.req) return info\n\n    const { time, size, type } = info.req\n\n    const sizeLabel = size ? `/ ${size}b` : ''\n    const typeLabel = type ? `/ ${type}` : ''\n    const extras = chalk.gray(`${time}ms ${sizeLabel} ${typeLabel}`)\n    return { ...info, req: { ...info.req, extras } }\n  }),\n\n  // Request payload & responses\n  reqBody: format((info) => {\n    if (!info.req) return info\n\n    const { payload } = info.req\n\n    // Parse response if JSON\n    const response = parseJSON(info.req.response)\n\n    const { prettify } = info.options\n    const opts = { colors: true, compact: false, ...(!prettify ? { breakLength: Infinity } : {}) }\n\n    // Update inspect colors\n    util.inspect.styles.string = 'white'\n\n    return {\n      ...info,\n      req: {\n        ...info.req,\n        payload: chalk.gray(`\\n Payload → ${util.inspect(payload, opts)}`),\n        response: chalk.gray(`\\n Response → ${util.inspect(response, opts)}`),\n      },\n    }\n  }),\n\n  // Request\n  req: format((info) => {\n    if (!info.req) return info\n\n    const {\n      method,\n      path,\n      status,\n      extras,\n      payload,\n      response,\n    } = info.req\n\n    const { env } = info.options\n\n    const message = env !== 'production'\n      ? `${method} ${path}  ${status}  ${extras} ${payload} ${response}`\n      : `${method} ${path}  ${status}  ${extras}`\n\n    return { ...info, message }\n  }),\n\n  // Mailer\n  mailer: format((info) => {\n    if (!info.mailer) return info\n\n    const { prettify } = info.options\n    const opts = { colors: true, compact: false, ...(!prettify ? { breakLength: Infinity } : {}) }\n\n    // Update inspect colors\n    util.inspect.styles.string = 'white'\n\n    const header = 'Email sent'\n    const response = chalk.gray(`Response → ${util.inspect(info.mailer.response, opts)}`)\n    const debug = chalk.gray(`Debug URL → ${util.inspect(info.mailer.debug, opts)}`)\n    return {\n      ...info,\n      message: `${header} \\n ${response} \\n ${debug}`,\n    }\n  }),\n}\n\nexport default format.combine(\n  formatters.error(),\n  formatters.timestamp(),\n  formatters.level(),\n\n  // Request / Response\n  formatters.reqStatus(),\n  formatters.reqExtras(),\n  formatters.reqBody(),\n  formatters.req(),\n\n  // Mailer\n  formatters.mailer(),\n\n  // Print message\n  format.printf(info => `${info.timestamp} ${info.level} ${info.message}`),\n)\n"]}