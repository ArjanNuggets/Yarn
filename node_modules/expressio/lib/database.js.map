{"version":3,"sources":["../src/database.js"],"names":["getModels","dir","sequelize","models","fs","readdirSync","filter","file","indexOf","forEach","model","import","path","join","name","Object","values","md","associate","getDirs","root","isSqlite","db","migrations","sqlite","ndtk","isDir","mkdirSync","errorHandler","err","req","res","next","allowed","includes","iterator","obj","message","validatorKey","assign","type","seqError","httpError","attributes","errors","reduce","schema","Joi","object","enabled","boolean","required","dialect","string","trim","valid","connection","ssl","server","config","utils","sanitize","logger","psqlPrefix","conn","Sequelize","operatorsAliases","logging","msg","info","dialectOptions","migrate","connect","pending","status","length","Error","authenticate","env","e","disconnect","close","reset","drop","run","seed","fn","error","truncate","promises","map","destroy","Promise","all","cmd","tasks","process","exit","database","instance","use","Op","events","on","srv"],"mappings":"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","file":"database.js","sourcesContent":["/**\n * Database: Sequelize Adapter\n *\n * @copyright Copyright (c) 2018, hugw.io\n * @author Hugo W - contact@hugw.io\n * @license MIT\n */\n\nimport Joi from 'joi'\nimport ndtk from 'ndtk'\nimport path from 'path'\nimport fs from 'fs'\nimport Sequelize from 'sequelize'\n\nimport utils from '@/utils'\nimport migrations from '@/migrations'\n\n/**\n * Auto load models\n * and return them into\n * a single object\n */\nfunction getModels(dir, sequelize) {\n  const models = {}\n\n  fs.readdirSync(dir)\n    .filter(file => ((file.indexOf('.') !== 0) && (file !== 'index.js')))\n    .forEach((file) => {\n      const model = sequelize.import(path.join(dir, file))\n      models[model.name] = model\n    })\n\n  Object.values(models).forEach(md => md.associate && md.associate(models))\n\n  return models\n}\n\n/**\n * Get database directories\n *\n * /models\n * /db\n *   /migrations\n *   /sqlite\n */\nfunction getDirs(root, isSqlite) {\n  const models = path.join(root, 'models')\n  const db = path.join(root, 'db')\n  const migrations = path.join(db, 'migrations') // eslint-disable-line\n  const sqlite = path.join(db, 'sqlite')\n\n  if (!ndtk.isDir(models)) fs.mkdirSync(models)\n  if (!ndtk.isDir(db)) fs.mkdirSync(db)\n  if (!ndtk.isDir(sqlite) && isSqlite) fs.mkdirSync(sqlite)\n  if (!ndtk.isDir(migrations)) fs.mkdirSync(migrations)\n\n  return {\n    models,\n    db,\n    migrations,\n    sqlite,\n  }\n}\n\n/**\n * Format Sequelize errors\n */\nconst errorHandler = (err, req, res, next) => {\n  const allowed = ['SequelizeUniqueConstraintError', 'SequelizeValidationError']\n\n  if (allowed.includes(err.name)) {\n    const iterator = (obj, { message, path, validatorKey }) => Object.assign({}, obj, { // eslint-disable-line\n      [path]: {\n        message: validatorKey === 'not_unique' ? `${path} is already in use` : message,\n        type: validatorKey === 'not_unique' ? 'unique' : validatorKey,\n      },\n    })\n\n    const seqError = ndtk.httpError(422, {\n      message: 'Invalid data',\n      type: 'VALIDATION',\n      attributes: err.errors.reduce(iterator, {}),\n    })\n\n    return next(seqError)\n  }\n\n  return next(err)\n}\n\n/**\n * Object schemas\n * to validate configuration\n */\nconst schema = Joi.object({\n  enabled: Joi.boolean().required(),\n  dialect: Joi.string().trim().valid(['sqlite', 'postgres']).required(),\n  connection: Joi.string().required(),\n  ssl: Joi.boolean().required(),\n})\n\nexport default (server, config) => {\n  const {\n    enabled,\n    dialect,\n    connection,\n    ssl,\n  } = utils.sanitize(config, schema, 'Invalid Database config')\n\n  if (!enabled) return\n\n  const { logger, root } = server\n\n  // Get / Create directories\n  const dir = getDirs(root, dialect === 'sqlite')\n\n  // Setup connection signature\n  const psqlPrefix = connection.indexOf('postgres://') === -1 ? `${dialect}://` : ''\n  const conn = dialect === 'sqlite'\n    ? `${dialect}:${dir.sqlite}/${connection}`\n    : `${psqlPrefix}${connection}`\n\n  // Create new Sequelize instance\n  const sequelize = new Sequelize(conn, {\n    operatorsAliases: false,\n    logging: msg => msg.indexOf('SequelizeMeta') === -1 && logger.info(msg),\n    dialectOptions: { ssl },\n  })\n\n  // Setup models\n  const models = getModels(dir.models, sequelize)\n\n  // Setup migrations api\n  const migrate = migrations(sequelize, dir.migrations, logger)\n\n  /**\n   * Connect\n   */\n  const connect = async () => {\n    try {\n      const { pending } = await migrate.status()\n      if (pending.length) throw new Error('Database error: please execute pending migrations')\n      await sequelize.authenticate()\n      logger.info(`Database running â†’ ${dialect} @ ${server.env}`)\n    } catch (e) {\n      throw e\n    }\n  }\n\n  /**\n   * Disconnect\n   */\n  const disconnect = async () => {\n    await sequelize.close()\n  }\n\n  /**\n   * Reset\n   */\n  const reset = async () => {\n    await sequelize.drop()\n    await migrate.run('up')\n  }\n\n  /**\n   * Seed\n   */\n  const seed = async () => {\n    const fn = ndtk.req(`${dir.db}/seed`)\n\n    if (fn) {\n      await reset()\n      logger.info('Database: adding seed data...')\n\n      try {\n        await fn(models, server.env)\n        server.logger.info('Database: seed data added successfuly')\n      } catch (e) {\n        logger.error(e)\n      }\n    } else {\n      logger.error('Database error: No seed data found at the location \"db/seed.js\"')\n    }\n  }\n\n  /**\n   * Truncate\n   */\n  const truncate = async () => {\n    const values = Object.values(models)\n    const promises = values.map(model => model.destroy({ truncate: true }))\n    return Promise.all(promises)\n  }\n\n  /**\n   * Run\n   */\n  const run = async (cmd) => {\n    const tasks = { seed, reset, truncate }\n    if (['up', 'down', 'prev', 'next'].includes(cmd)) await migrate.run(cmd)\n    if (['seed', 'reset', 'truncate'].includes(cmd)) await tasks[cmd]()\n    process.exit(0)\n  }\n\n  // Expose Database Api to the server object\n  server.database = {\n    connect,\n    disconnect,\n    seed,\n    truncate,\n    run,\n    reset,\n    migrate,\n    instance: sequelize,\n  }\n  server.Sequelize = Sequelize\n  server.models = models\n\n  // Expose Database Api to the request object\n  server.use((req, res, next) => {\n    req.models = models\n    req.Op = Sequelize.Op\n    next()\n  })\n\n  // Register events\n  server.events.on('preStart', srv => srv.use(errorHandler))\n  server.events.on('preStart', connect)\n  server.events.on('preStop', disconnect)\n}\n"]}