{"version":3,"sources":["../src/migrations.js"],"names":["sequelize","dir","logger","umzug","Umzug","storage","storageOptions","migrations","params","getQueryInterface","constructor","Error","path","pattern","logging","info","api","status","exec","executed","pend","pending","iterator","m","name","basename","file","reverse","map","down","to","up","prev","length","next","summary","current","join","run","cmd","err","error"],"mappings":"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","file":"migrations.js","sourcesContent":["/**\n * Database: Migrations API\n *\n * @copyright Copyright (c) 2018, hugw.io\n * @author Hugo W - contact@hugw.io\n * @license MIT\n */\n\nimport Umzug from 'umzug'\nimport path from 'path'\n\nexport default (sequelize, dir, logger) => {\n  const umzug = new Umzug({\n    storage: 'sequelize',\n    storageOptions: { sequelize },\n\n    // see: https://github.com/sequelize/umzug/issues/17\n    migrations: {\n      params: [\n        sequelize.getQueryInterface(),\n        sequelize.constructor,\n        () => {\n          throw new Error('Migration tried to use old style \"done\" callback. Please upgrade to \"umzug\" and return a promise instead.')\n        },\n      ],\n      path: dir,\n      pattern: /\\.js$/,\n    },\n\n    logging: logger.info,\n  })\n\n  const api = {}\n\n  /**\n   * Status\n   */\n  api.status = async () => {\n    const exec = await umzug.executed()\n    const pend = await umzug.pending()\n    const iterator = m => ({ ...m, name: path.basename(m.file, '.js') })\n\n    const executed = exec.reverse().map(iterator)\n    const pending = pend.map(iterator)\n\n    return { executed, pending }\n  }\n\n  /**\n   * Down\n   */\n  api.down = () => umzug.down({ to: 0 })\n\n  /**\n   * Up\n   */\n  api.up = () => umzug.up()\n\n  /**\n   * Prev\n   */\n  api.prev = async () => {\n    const { executed } = await api.status()\n\n    if (!executed.length) throw new Error('Already at the initial state')\n    const prev = executed[0].name\n    return umzug.down({ to: prev })\n  }\n\n  /**\n   * Next\n   */\n  api.next = async () => {\n    const { pending } = await api.status()\n\n    if (!pending.length) throw new Error('No pending migrations left')\n    const next = pending[0].name\n    return umzug.up({ to: next })\n  }\n\n  /**\n   * Summary\n   */\n  api.summary = async () => {\n    const status = await api.status()\n    const current = status.executed.length > 0 ? status.executed[0].file : 'no migrations'\n    const pending = status.pending.map(m => m.file).join(', ') || 'none'\n    const executed = status.executed.map(m => m.file).join(', ') || 'none'\n    // @TODO Move to logger formatter\n    logger.info('== Summary =======')\n    logger.info(`current: ${current}`)\n    logger.info(`pending: ${pending}`)\n    logger.info(`executed: ${executed}`)\n  }\n\n  /**\n   * Run\n   */\n  api.run = async (cmd) => {\n    try {\n      await api[cmd]()\n    } catch (err) {\n      logger.error(err)\n    } finally {\n      await api.summary()\n    }\n  }\n\n  return api\n}\n"]}