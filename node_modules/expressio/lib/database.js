'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _ndtk = require('ndtk');

var _ndtk2 = _interopRequireDefault(_ndtk);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _sequelize = require('sequelize');

var _sequelize2 = _interopRequireDefault(_sequelize);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _migrations = require('./migrations');

var _migrations2 = _interopRequireDefault(_migrations);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Auto load models
 * and return them into
 * a single object
 */
function getModels(dir, sequelize) {
  const models = {};

  _fs2.default.readdirSync(dir).filter(file => file.indexOf('.') !== 0 && file !== 'index.js').forEach(file => {
    const model = sequelize.import(_path2.default.join(dir, file));
    models[model.name] = model;
  });

  Object.values(models).forEach(md => md.associate && md.associate(models));

  return models;
}

/**
 * Get database directories
 *
 * /models
 * /db
 *   /migrations
 *   /sqlite
 */
/**
 * Database: Sequelize Adapter
 *
 * @copyright Copyright (c) 2018, hugw.io
 * @author Hugo W - contact@hugw.io
 * @license MIT
 */

function getDirs(root, isSqlite) {
  const models = _path2.default.join(root, 'models');
  const db = _path2.default.join(root, 'db');
  const migrations = _path2.default.join(db, 'migrations'); // eslint-disable-line
  const sqlite = _path2.default.join(db, 'sqlite');

  if (!_ndtk2.default.isDir(models)) _fs2.default.mkdirSync(models);
  if (!_ndtk2.default.isDir(db)) _fs2.default.mkdirSync(db);
  if (!_ndtk2.default.isDir(sqlite) && isSqlite) _fs2.default.mkdirSync(sqlite);
  if (!_ndtk2.default.isDir(migrations)) _fs2.default.mkdirSync(migrations);

  return {
    models,
    db,
    migrations,
    sqlite
  };
}

/**
 * Format Sequelize errors
 */
const errorHandler = (err, req, res, next) => {
  const allowed = ['SequelizeUniqueConstraintError', 'SequelizeValidationError'];

  if (allowed.includes(err.name)) {
    const iterator = (obj, { message, path, validatorKey }) => Object.assign({}, obj, { // eslint-disable-line
      [path]: {
        message: validatorKey === 'not_unique' ? `${path} is already in use` : message,
        type: validatorKey === 'not_unique' ? 'unique' : validatorKey
      }
    });

    const seqError = _ndtk2.default.httpError(422, {
      message: 'Invalid data',
      type: 'VALIDATION',
      attributes: err.errors.reduce(iterator, {})
    });

    return next(seqError);
  }

  return next(err);
};

/**
 * Object schemas
 * to validate configuration
 */
const schema = _joi2.default.object({
  enabled: _joi2.default.boolean().required(),
  dialect: _joi2.default.string().trim().valid(['sqlite', 'postgres']).required(),
  connection: _joi2.default.string().required(),
  ssl: _joi2.default.boolean().required()
});

exports.default = (server, config) => {
  const {
    enabled,
    dialect,
    connection,
    ssl
  } = _utils2.default.sanitize(config, schema, 'Invalid Database config');

  if (!enabled) return;

  const { logger, root } = server;

  // Get / Create directories
  const dir = getDirs(root, dialect === 'sqlite');

  // Setup connection signature
  const psqlPrefix = connection.indexOf('postgres://') === -1 ? `${dialect}://` : '';
  const conn = dialect === 'sqlite' ? `${dialect}:${dir.sqlite}/${connection}` : `${psqlPrefix}${connection}`;

  // Create new Sequelize instance
  const sequelize = new _sequelize2.default(conn, {
    operatorsAliases: false,
    logging: msg => msg.indexOf('SequelizeMeta') === -1 && logger.info(msg),
    dialectOptions: { ssl }
  });

  // Setup models
  const models = getModels(dir.models, sequelize);

  // Setup migrations api
  const migrate = (0, _migrations2.default)(sequelize, dir.migrations, logger);

  /**
   * Connect
   */
  const connect = async () => {
    try {
      const { pending } = await migrate.status();
      if (pending.length) throw new Error('Database error: please execute pending migrations');
      await sequelize.authenticate();
      logger.info(`Database running â†’ ${dialect} @ ${server.env}`);
    } catch (e) {
      throw e;
    }
  };

  /**
   * Disconnect
   */
  const disconnect = async () => {
    await sequelize.close();
  };

  /**
   * Reset
   */
  const reset = async () => {
    await sequelize.drop();
    await migrate.run('up');
  };

  /**
   * Seed
   */
  const seed = async () => {
    const fn = _ndtk2.default.req(`${dir.db}/seed`);

    if (fn) {
      await reset();
      logger.info('Database: adding seed data...');

      try {
        await fn(models, server.env);
        server.logger.info('Database: seed data added successfuly');
      } catch (e) {
        logger.error(e);
      }
    } else {
      logger.error('Database error: No seed data found at the location "db/seed.js"');
    }
  };

  /**
   * Truncate
   */
  const truncate = async () => {
    const values = Object.values(models);
    const promises = values.map(model => model.destroy({ truncate: true }));
    return Promise.all(promises);
  };

  /**
   * Run
   */
  const run = async cmd => {
    const tasks = { seed, reset, truncate };
    if (['up', 'down', 'prev', 'next'].includes(cmd)) await migrate.run(cmd);
    if (['seed', 'reset', 'truncate'].includes(cmd)) await tasks[cmd]();
    process.exit(0);
  };

  // Expose Database Api to the server object
  server.database = {
    connect,
    disconnect,
    seed,
    truncate,
    run,
    reset,
    migrate,
    instance: sequelize
  };
  server.Sequelize = _sequelize2.default;
  server.models = models;

  // Expose Database Api to the request object
  server.use((req, res, next) => {
    req.models = models;
    req.Op = _sequelize2.default.Op;
    next();
  });

  // Register events
  server.events.on('preStart', srv => srv.use(errorHandler));
  server.events.on('preStart', connect);
  server.events.on('preStop', disconnect);
};
//# sourceMappingURL=database.js.map