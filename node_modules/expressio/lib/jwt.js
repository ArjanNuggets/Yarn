'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * JWT
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * Authorize requests based
                                                                                                                                                                                                                                                                   * on JWT Tokens
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * @copyright Copyright (c) 2018, hugw.io
                                                                                                                                                                                                                                                                   * @author Hugo W - contact@hugw.io
                                                                                                                                                                                                                                                                   * @license MIT
                                                                                                                                                                                                                                                                   */

var _expressJwt = require('express-jwt');

var _expressJwt2 = _interopRequireDefault(_expressJwt);

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _jsonwebtoken = require('jsonwebtoken');

var _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);

var _ndtk = require('ndtk');

var _ndtk2 = _interopRequireDefault(_ndtk);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Object schemas
 * to validate configuration
 */
const schema = _joi2.default.object({
  enabled: _joi2.default.boolean().required(),
  secret: _joi2.default.string().required(),
  expiresIn: _joi2.default.string().required(),
  algorithm: _joi2.default.string().required()
});

exports.default = (server, config) => {
  const {
    // @TODO Move secret outside of jwt config object
    secret,
    expiresIn,
    algorithm,
    enabled
  } = _utils2.default.sanitize(config, schema, 'Invalid JWT config');

  if (!enabled) return;

  /**
   * Setup JWT authorization
   */
  const setup = (unless = {}) => {
    const fn = (0, _expressJwt2.default)({ secret }).unless(unless);
    server.use(fn);
  };

  /**
   * Create JWT tokens
   * with a given signature
   */
  const sign = (data, opts) => _jsonwebtoken2.default.sign({ data }, secret, _extends({ expiresIn }, opts, { algorithm }));

  /**
   * Format JWT authorization errors
   */
  const errorHandler = (err, req, res, next) => {
    if (err.name === 'UnauthorizedError') {
      const messages = {
        'jwt expired': 'The token provided has expired',
        'invalid signature': 'The token provided is invalid',
        'jwt malformed': 'The token provided is invalid',
        'No authorization token was found': 'Authorization token is missing'
      };

      const authError = _ndtk2.default.httpError(401, { message: messages[err.message] || err.message });
      return next(authError);
    }

    return next(err);
  };

  // Expose JWT Api to the server object
  server.jwt = { sign, setup

    // Expose JWT Api to the request object
  };server.use((req, res, next) => {
    req.jwt = { sign };
    next();
  });

  // Register error handler
  server.events.on('preStart', srv => srv.use(errorHandler));
};
//# sourceMappingURL=jwt.js.map