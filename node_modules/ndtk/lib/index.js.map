{"version":3,"sources":["../src/index.js"],"names":["DEV","STAG","TEST","PROD","QA","ENV","process","env","NODE_ENV","IS_DEV","IS_TEST","IS_STAG","IS_PROD","IS_QA","assert","condition","content","error","Error","captureStackTrace","ccd","oldPrepareStackTrace","prepareStackTrace","err","stack","line","path","dirname","getFileName","req","name","defaultOnly","dir","resolve","module","require","default","supported","version","isNumber","Number","parseFloat","supMajor","supMinor","toString","split","map","major","minor","versions","node","isDir","stats","fs","statSync","isDirectory","e","config","object","defaults","httpError","code","meta","message","undefined","type","attributes","status","statuses","isHttp","output","merge"],"mappings":";;;;;;;kQAAA;;;;;;;;AAQA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;AAIA,MAAMA,MAAM,aAAZ;AACA,MAAMC,OAAO,SAAb;AACA,MAAMC,OAAO,MAAb;AACA,MAAMC,OAAO,YAAb;AACA,MAAMC,KAAK,IAAX;;AAEO,MAAMC,oBAAMC,QAAQC,GAAR,CAAYC,QAAZ,IAAwBR,GAApC;;AAEA,MAAMS,0BAASJ,QAAQL,GAAvB;AACA,MAAMU,4BAAUL,QAAQH,IAAxB;AACA,MAAMS,4BAAUN,QAAQJ,IAAxB;AACA,MAAMW,4BAAUP,QAAQF,IAAxB;AACA,MAAMU,wBAAQR,QAAQD,EAAtB;;AAEP;;;;AAIO,MAAMU,0BAAS,CAACC,SAAD,EAAYC,OAAZ,KAAwB;AAC5C,MAAID,SAAJ,EAAe;AACf,MAAIE,KAAJ;;AAEA,MAAID,mBAAmBE,KAAvB,EAA8B;AAC5BD,YAAQD,OAAR;AACD,GAFD,MAEO,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AACtCC,YAAQ,IAAIC,KAAJ,CAAUF,OAAV,CAAR;AACD,GAFM,MAEA;AACLC,YAAQ,IAAIC,KAAJ,CAAU,uBAAV,CAAR;AACD;;AAED;AACAA,QAAMC,iBAAN,CAAwBF,KAAxB,EAA+BH,MAA/B;AACA,QAAMG,KAAN;AACD,CAfM;;AAiBP;;;;AAIO,MAAMG,oBAAM,MAAM;AACvB,QAAMC,uBAAuBH,MAAMI,iBAAnC;AACAJ,QAAMI,iBAAN,GAA0B,CAACC,GAAD,EAAMC,KAAN,KAAgBA,KAA1C;;AAEA,QAAM,EAAEA,KAAF,KAAY,IAAIN,KAAJ,EAAlB;AACAA,QAAMI,iBAAN,GAA0BD,oBAA1B;;AAEA;AACA;AACA;AACA,QAAMI,OAAOD,MAAM,CAAN,CAAb;AACA,SAAO,CAAC,CAACC,IAAF,IAAUC,eAAKC,OAAL,CAAaF,KAAKG,WAAL,EAAb,CAAjB;AACD,CAZM;;AAcP;;;;AAIO,MAAMC,oBAAM,CAACC,IAAD,EAAOC,cAAc,IAArB,KAA8B;AAC/C,MAAI;AACF,UAAMC,MAAMN,eAAKO,OAAL,CAAab,KAAb,EAAoBU,IAApB,CAAZ;AACA,UAAMI,SAASC,QAAQH,GAAR,CAAf,CAFE,CAE0B;AAC5B,WAAOD,cAAcG,OAAOE,OAArB,GAA+BF,MAAtC;AACD,GAJD,CAIE,OAAOX,GAAP,EAAY;AACZ,WAAO,IAAP;AACD;AACF,CARM;;AAUP;;;;AAIO,MAAMc,gCAAaC,OAAD,IAAa;AACpC;AACA,QAAMC,WAAWC,OAAOC,UAAP,CAAkBH,OAAlB,CAAjB;AACA,MAAI,CAACC,QAAL,EAAe,OAAO,KAAP;;AAEf,QAAM,CAACG,QAAD,EAAWC,QAAX,IAAuBL,QAAQM,QAAR,GAAmBC,KAAnB,CAAyB,GAAzB,EAA8BC,GAA9B,CAAkCL,UAAlC,CAA7B;AACA,QAAM,CAACM,KAAD,EAAQC,KAAR,IAAiB1C,QAAQ2C,QAAR,CAAiBC,IAAjB,CAAsBL,KAAtB,CAA4B,GAA5B,EAAiCC,GAAjC,CAAqCL,UAArC,CAAvB;;AAEA,MAAIM,QAAQL,QAAZ,EAAsB,OAAO,KAAP;AACtB,SAAOC,WAAWK,SAASL,QAApB,GAA+B,IAAtC;AACD,CAVM;;AAYP;;;;;AAKO,MAAMQ,wBAASnB,GAAD,IAAS;AAC5B,MAAI;AACF,UAAMoB,QAAQC,aAAGC,QAAH,CAAYtB,GAAZ,CAAd;AACA,WAAOoB,MAAMG,WAAN,EAAP;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AAAE,WAAO,KAAP;AAAc;AAC7B,CALM;;AAOP;;;;AAIO,MAAMC,0BAAS,CAACC,MAAD,EAASC,QAAT,KAAsB,qBAC1C,EAD0C,EAE1CA,YAAYA,SAASvB,OAFqB,EAG1CsB,UAAUA,OAAOtB,OAHyB,EAI1CuB,YAAYA,SAAStD,GAAT,CAJ8B,EAK1CqD,UAAUA,OAAOrD,GAAP,CALgC,CAArC;;AAQP;;;AAGO,MAAMuD,gCAAY,CAACC,IAAD,EAAOC,OAAO,EAAd,KAAqB;AAC5C,QAAMH,WAAW,qBAAM;AACrBI,aAASC,SADY;AAErBC,UAAMD,SAFe;AAGrBE,gBAAYF;AAHS,GAAN,EAIdF,IAJc,CAAjB;;AAMA,QAAMK,SAASC,mBAASP,IAAT,IAAiBA,IAAjB,GAAwB,GAAvC;AACA,QAAME,UAAUJ,SAASI,OAAT,IAAoBK,mBAASD,MAAT,CAApC;AACA,QAAMF,OAAON,SAASM,IAAT,IAAiB,uBAAQ,yBAAUG,mBAASD,MAAT,CAAV,CAAR,CAA9B;AACA,QAAM,EAAED,UAAF,KAAiBJ,IAAvB;;AAEA,QAAM7C,QAAQ,IAAIC,KAAJ,CAAU6C,OAAV,CAAd;;AAEA9C,QAAMoD,MAAN,GAAe,IAAf;AACApD,QAAMqD,MAAN;AACEH,UADF;AAEEJ,WAFF;AAGEE;AAHF,KAIKC,aAAa,EAAEA,UAAF,EAAb,GAA8B,EAJnC;;AAOA;AACAhD,QAAMC,iBAAN,CAAwBF,KAAxB,EAA+B2C,SAA/B;;AAEA,SAAO3C,KAAP;AACD,CA1BM;;kBA4BQ;AACbH,QADa;AAEbM,KAFa;AAGbS,KAHa;AAIbQ,WAJa;AAKbc,OALa;AAMbM,QANa;AAObc,wBAPa;AAQbX;AARa,C","file":"index.js","sourcesContent":["/**\n * Node Toolkit - Utility Functions\n *\n * @copyright Copyright (c) 2018, hugw.io\n * @author Hugo W - contact@hugw.io\n * @license MIT\n */\n\nimport path from 'path'\nimport fs from 'fs'\nimport merge from 'lodash/merge'\nimport snakeCase from 'lodash/snakeCase'\nimport toUpper from 'lodash/toUpper'\nimport statuses from 'statuses'\n\n/**\n * Environment\n * utility functions\n */\nconst DEV = 'development'\nconst STAG = 'staging'\nconst TEST = 'test'\nconst PROD = 'production'\nconst QA = 'qa'\n\nexport const ENV = process.env.NODE_ENV || DEV\n\nexport const IS_DEV = ENV === DEV\nexport const IS_TEST = ENV === TEST\nexport const IS_STAG = ENV === STAG\nexport const IS_PROD = ENV === PROD\nexport const IS_QA = ENV === QA\n\n/**\n * Executes simple assertions and\n * throw errors in negative cases\n */\nexport const assert = (condition, content) => {\n  if (condition) return\n  let error\n\n  if (content instanceof Error) {\n    error = content\n  } else if (typeof content === 'string') {\n    error = new Error(content)\n  } else {\n    error = new Error('Something went wrong.')\n  }\n\n  // Omits all frames above \"assert\" from the generated stack trace\n  Error.captureStackTrace(error, assert)\n  throw error\n}\n\n/**\n * Current caller directory\n * @link https://github.com/stefanpenner/get-caller-file/blob/master/index.js\n */\nexport const ccd = () => {\n  const oldPrepareStackTrace = Error.prepareStackTrace\n  Error.prepareStackTrace = (err, stack) => stack\n\n  const { stack } = new Error()\n  Error.prepareStackTrace = oldPrepareStackTrace\n\n  // stack[0] holds this file\n  // stack[1] holds where this function was called\n  // stack[2] holds the file we're interested in\n  const line = stack[2]\n  return !!line && path.dirname(line.getFileName())\n}\n\n/**\n * Require optional modules without\n * throwing unwanted exceptions\n */\nexport const req = (name, defaultOnly = true) => {\n  try {\n    const dir = path.resolve(ccd(), name)\n    const module = require(dir) // eslint-disable-line global-require, import/no-dynamic-require\n    return defaultOnly ? module.default : module\n  } catch (err) {\n    return null\n  }\n}\n\n/**\n * Verifies if the current Node running\n * is supported\n */\nexport const supported = (version) => {\n  // Numbers or strings are accepted\n  const isNumber = Number.parseFloat(version)\n  if (!isNumber) return false\n\n  const [supMajor, supMinor] = version.toString().split('.').map(parseFloat)\n  const [major, minor] = process.versions.node.split('.').map(parseFloat)\n\n  if (major < supMajor) return false\n  return supMinor ? minor >= supMinor : true\n}\n\n/**\n * Verifies if current path\n * is a valid directory without\n * throwing unwanted exceptions\n */\nexport const isDir = (dir) => {\n  try {\n    const stats = fs.statSync(dir)\n    return stats.isDirectory()\n  } catch (e) { return false }\n}\n\n/**\n * Generates configuration objects based\n * on the current environment\n */\nexport const config = (object, defaults) => merge(\n  {},\n  defaults && defaults.default,\n  object && object.default,\n  defaults && defaults[ENV],\n  object && object[ENV],\n)\n\n/**\n * HTTP-friendly error objects\n */\nexport const httpError = (code, meta = {}) => {\n  const defaults = merge({\n    message: undefined,\n    type: undefined,\n    attributes: undefined,\n  }, meta)\n\n  const status = statuses[code] ? code : 500\n  const message = defaults.message || statuses[status]\n  const type = defaults.type || toUpper(snakeCase(statuses[status]))\n  const { attributes } = meta\n\n  const error = new Error(message)\n\n  error.isHttp = true\n  error.output = {\n    status,\n    message,\n    type,\n    ...attributes ? { attributes } : {},\n  }\n\n  // Omits all frames above \"httpError\" from the generated stack trace\n  Error.captureStackTrace(error, httpError)\n\n  return error\n}\n\nexport default {\n  assert,\n  ccd,\n  req,\n  supported,\n  isDir,\n  config,\n  merge,\n  httpError,\n}\n"]}