'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.httpError = exports.config = exports.isDir = exports.supported = exports.req = exports.ccd = exports.assert = exports.IS_QA = exports.IS_PROD = exports.IS_STAG = exports.IS_TEST = exports.IS_DEV = exports.ENV = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Node Toolkit - Utility Functions
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * @copyright Copyright (c) 2018, hugw.io
                                                                                                                                                                                                                                                                   * @author Hugo W - contact@hugw.io
                                                                                                                                                                                                                                                                   * @license MIT
                                                                                                                                                                                                                                                                   */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

var _snakeCase = require('lodash/snakeCase');

var _snakeCase2 = _interopRequireDefault(_snakeCase);

var _toUpper = require('lodash/toUpper');

var _toUpper2 = _interopRequireDefault(_toUpper);

var _statuses = require('statuses');

var _statuses2 = _interopRequireDefault(_statuses);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Environment
 * utility functions
 */
const DEV = 'development';
const STAG = 'staging';
const TEST = 'test';
const PROD = 'production';
const QA = 'qa';

const ENV = exports.ENV = process.env.NODE_ENV || DEV;

const IS_DEV = exports.IS_DEV = ENV === DEV;
const IS_TEST = exports.IS_TEST = ENV === TEST;
const IS_STAG = exports.IS_STAG = ENV === STAG;
const IS_PROD = exports.IS_PROD = ENV === PROD;
const IS_QA = exports.IS_QA = ENV === QA;

/**
 * Executes simple assertions and
 * throw errors in negative cases
 */
const assert = exports.assert = (condition, content) => {
  if (condition) return;
  let error;

  if (content instanceof Error) {
    error = content;
  } else if (typeof content === 'string') {
    error = new Error(content);
  } else {
    error = new Error('Something went wrong.');
  }

  // Omits all frames above "assert" from the generated stack trace
  Error.captureStackTrace(error, assert);
  throw error;
};

/**
 * Current caller directory
 * @link https://github.com/stefanpenner/get-caller-file/blob/master/index.js
 */
const ccd = exports.ccd = () => {
  const oldPrepareStackTrace = Error.prepareStackTrace;
  Error.prepareStackTrace = (err, stack) => stack;

  const { stack } = new Error();
  Error.prepareStackTrace = oldPrepareStackTrace;

  // stack[0] holds this file
  // stack[1] holds where this function was called
  // stack[2] holds the file we're interested in
  const line = stack[2];
  return !!line && _path2.default.dirname(line.getFileName());
};

/**
 * Require optional modules without
 * throwing unwanted exceptions
 */
const req = exports.req = (name, defaultOnly = true) => {
  try {
    const dir = _path2.default.resolve(ccd(), name);
    const module = require(dir); // eslint-disable-line global-require, import/no-dynamic-require
    return defaultOnly ? module.default : module;
  } catch (err) {
    return null;
  }
};

/**
 * Verifies if the current Node running
 * is supported
 */
const supported = exports.supported = version => {
  // Numbers or strings are accepted
  const isNumber = Number.parseFloat(version);
  if (!isNumber) return false;

  const [supMajor, supMinor] = version.toString().split('.').map(parseFloat);
  const [major, minor] = process.versions.node.split('.').map(parseFloat);

  if (major < supMajor) return false;
  return supMinor ? minor >= supMinor : true;
};

/**
 * Verifies if current path
 * is a valid directory without
 * throwing unwanted exceptions
 */
const isDir = exports.isDir = dir => {
  try {
    const stats = _fs2.default.statSync(dir);
    return stats.isDirectory();
  } catch (e) {
    return false;
  }
};

/**
 * Generates configuration objects based
 * on the current environment
 */
const config = exports.config = (object, defaults) => (0, _merge2.default)({}, defaults && defaults.default, object && object.default, defaults && defaults[ENV], object && object[ENV]);

/**
 * HTTP-friendly error objects
 */
const httpError = exports.httpError = (code, meta = {}) => {
  const defaults = (0, _merge2.default)({
    message: undefined,
    type: undefined,
    attributes: undefined
  }, meta);

  const status = _statuses2.default[code] ? code : 500;
  const message = defaults.message || _statuses2.default[status];
  const type = defaults.type || (0, _toUpper2.default)((0, _snakeCase2.default)(_statuses2.default[status]));
  const { attributes } = meta;

  const error = new Error(message);

  error.isHttp = true;
  error.output = _extends({
    status,
    message,
    type
  }, attributes ? { attributes } : {});

  // Omits all frames above "httpError" from the generated stack trace
  Error.captureStackTrace(error, httpError);

  return error;
};

exports.default = {
  assert,
  ccd,
  req,
  supported,
  isDir,
  config,
  merge: _merge2.default,
  httpError
};
//# sourceMappingURL=index.js.map